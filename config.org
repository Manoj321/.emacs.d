* Emacs Configuration

I have been using Emacs extensively since Jan of 2014. Thanks to some awesome
emacser's at my current company I have learnt a great deal about it. I remember my
days of struggle while learning emacs, but now all the hard work has paid off and I
*absolutely love* EMACS!

I use [[https://github.com/jwiegley/use-package][use-package]] to manage my emacs config.

* Arista Specific
** Arastra library

#+BEGIN_SRC emacs-lisp
  ;; load this only on arista server
  (when (and (getenv "HOSTNAME") (string-match "arista" (getenv "HOSTNAME")))

     ;; Use separate emacs daemon for each project.
    (if (getenv "WP")
      (setq server-name (getenv "WP")))

  (load-library "arastra-indent")

  ;; Integration with a4, for checking files out and for
  ;; compiling/running/debugging within emacs.
  (load-library "a4")

  ;; Support for gnu id-utils
  (autoload 'gid "id-utils" "Lookup a string in a mkid database" t)

  ;; Arista gid extensions
  (load-library "a4-gid")

  ;; Some little useful functions like C-ct for a timestamp
  (load-library "arastra-utils")
  (load-library "cp-utils")

  ;; Aformat mode
  (use-package aformat-mode
    :diminish aformat-mode)

  ;; Bug Mode
  (use-package "bug-mode"
    :bind  (("C-x g g" . bug-goto)
            ("C-x g d" . bug-describe-change)))

  ;; Abuild mode
  (use-package "abuild" )

  (defun p4-write-attempt (data context caller)
    ;; If it's a buffer that has a filename (not a special buffer like
    ;; *Messages* or *Completions*) and it's read-only and you wrote to it
    (if (and (buffer-file-name) (eq 'buffer-read-only (car data)))
        ;; And the user wants to checked out
        (if (y-or-n-p "Checkout in Perforce?")
            (a4-edit (buffer-file-name)))))
  (setq command-error-function 'p4-write-attempt)

  ;; Arista copy utils
  (global-set-key (kbd "C-x c p") 'cp-cur-word)
  (global-set-key (kbd "C-x c f") 'cp-cur-file-name)
  (global-set-key (kbd "C-x c w") 'cp-which-func)

  ;; a4-changes mode
  (use-package "a4-changes" )

  ;; Pylint compile
  (use-package "python-pylint"
    :bind (( "C-x y" . python-pylint)))

  ;; Inihibit Fsync
  (setq write-region-inhibit-fsync t)

  ;; PDB Hook
  (defun my-shell-mode-hook ()
    (add-hook 'comint-output-filter-functions 'python-pdbtrack-comint-output-filter-function t))
  (add-hook 'shell-mode-hook 'my-shell-mode-hook)
  );;end arista specific changes
#+END_SRC

* Installing Emacs
I always use --with-imagemagick switch while installing, because I
read rss feeds in emacs.

On OSX
#+BEGIN_SRC sh
brew install emacs --with-cocoa --with-gnutls --with-rsvg --with-imagemagick
#+END_SRC

* Defaults
Some are adopted from [[https://github.com/magnars][magnars(@emacsrocks)]]
#+BEGIN_SRC emacs-lisp
  ;; Turn off GUI, because GUI makes you slow.
  (when window-system
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (tooltip-mode -1))

  (display-time)
  (setq display-time-format "%I:%M")
  ;; Hurts my ears
  (setq ring-bell-function 'ignore)

  ;; set font to 13pt
  (set-face-attribute 'default nil :height 110 :width 'normal)

  ;; Keep all backup and auto-save files in one directory
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  ;; Don't you dare to warn me!
  (setq large-file-warning-threshold nil)

  ;; Allow pasting selection outside of Emacs
  (setq x-select-enable-clipboard t)

  ;; Show keystrokes in progress
  (setq echo-keystrokes 0.1)

  ;; Move files to trash when deleting
  (setq delete-by-moving-to-trash t)

  ;; Real emacs knights don't use shift to mark things
  (setq shift-select-mode nil)

  ;; Transparently open compressed files
  (auto-compression-mode t)

  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Remove text in active region if inserting text
  (delete-selection-mode 1)

  ;; Always display line and column numbers
  (setq line-number-mode t)
  (setq column-number-mode t)

  ;; Lines should be 85 characters wide, not 72
  (setq-default fill-column 80)

  ;; Never insert tabs
  (set-default 'indent-tabs-mode nil)

  ;; Easily navigate sillycased words
  (global-subword-mode 1)

  ;; Garbage collect every 800KB
  (setq gc-cons-threshold 8000000)

  ;; Turn off the blinking cursor
  (blink-cursor-mode -1)

  ;; Enable show parenthesis
  (show-paren-mode t)

  ;; highlight current line
  (global-hl-line-mode t)

  ;; Window movement, a gamer might recognize these key combinations!
  (use-package windmove
    :bind (("C-c i" . windmove-up)
           ("C-c k" . windmove-down)
           ("C-c l" . windmove-right)
           ("C-c j" . windmove-left)))

  (use-package timeclock
    :bind (("C-c O" . timeclock-out)
           ("C-c I" . timeclock-in))
    :config (setq timeclock-file "~/Dropbox/accounting/timelog.dat"))

  (global-set-key (kbd "M-m") 'back-to-indentation)

  ;; Comment/un-comment
  (global-set-key (kbd "C-c ;") 'comment-or-uncomment-region)

  ;; Compile Command
  (global-set-key (kbd "C-c C-c") 'compile)

  (defun update-diff-colors ()
    "update the colors for diff faces"
    (set-face-attribute 'diff-added nil
                        :foreground "brightgreen"
                        :background nil)
    (set-face-attribute 'diff-removed nil
                        :foreground "brightred"
                        :background nil)
    (set-face-attribute 'diff-changed nil
                        :foreground "white"
                        :background nil)
    (set-face-attribute 'diff-refine-added nil
                        :foreground "Aquamarine"
                        :background "black")
    (set-face-attribute 'diff-refine-removed nil
                        :inherit nil
                        :foreground "Aquamarine"
                        :background nil)
    (set-face-attribute 'diff-hunk-header nil
                        :inherit nil
                        :foreground "yellow"
                        :background nil)
    (set-face-attribute 'diff-header nil
                        :foreground "color-69"
                        :background nil)
    (set-face-attribute 'diff-file-header nil
                        :foreground nil
                        :background nil))

  (eval-after-load "diff-mode"
    '(update-diff-colors))

  ;; Set location
  (setq calendar-latitude 37.4)
  (setq calendar-longitude -121.9)
  (setq calendar-location-name "San Jose, CA")

  ;; set global line highlight mode
  (setq global-hl-line-mode t)

  ;; Load languages
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((python . t)
                                 (influxdb . t)
                                 (shell . t)
                                 (sql . t)
                                 (emacs-lisp . t)))

  ;;Donot use proportional fonts
  (setq shr-use-fonts nil)

  (when window-system
    (set-frame-name "EMAIL")
    (make-frame '((name . "ORG")))
    (make-frame '((name . "EDIT")))

    (global-set-key (kbd "s-1") (lambda () (interactive) (select-frame-by-name "EMAIL")))
    (global-set-key (kbd "s-2") (lambda () (interactive) (select-frame-by-name "ORG")))
    (global-set-key (kbd "s-3") (lambda () (interactive) (select-frame-by-name "EDIT"))))

  ;; Split windows vertically, stops magit from horizontally splitting
  (setq split-height-threshold 100)
#+END_SRC

* Theme
** Zerodark theme
    #+BEGIN_SRC emacs-lisp
      (when window-system
        (use-package zerodark-theme
           :ensure t
           :config (zerodark-setup-modeline-format)))
    #+END_SRC
* Packages
** Company mode
    #+BEGIN_SRC emacs-lisp
      (use-package "company"
        :ensure t
        :hook (after-init-hook . global-company-mode))
    #+END_SRC
** company lsp
    #+BEGIN_SRC emacs-lisp
      (use-package "company-lsp"
        :ensure t
        :config (push 'company-lsp company-backends))
    #+END_SRC
** Dictionary
#+BEGIN_SRC emacs-lisp
  (use-package dictionary
    :ensure t
    :bind (("C-c d" . dictionary-lookup-definition)))
#+END_SRC
** DockerFile-mode
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
      :mode "Dockerfile.*")
#+END_SRC

** Docker
#+BEGIN_SRC emacs-lisp
  (use-package docker
    :commands (docker-images docker-containers)
    :init
    (when (string= system-type "darwin")
      (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
      (setq exec-path (append exec-path '("/usr/local/bin")))
      (setenv "DOCKER_TLS_VERIFY" "1")
      (setenv "DOCKER_HOST" "tcp://192.168.99.100:2376")
      (setenv "DOCKER_CERT_PATH" "/Users/manojm321/.docker/machine/machines/default")
      (setenv "DOCKER_MACHINE_NAME" "default"))
    :config (use-package docker-tramp
              :ensure t))
#+END_SRC
** Elfeed
#+begin_src emacs-lisp
  (use-package elfeed
    :ensure t
    :custom-face (elfeed-search-title-face ((t (:foreground "#c678dd" :height 1.2))))
    :config (setq elfeed-db-directory "~/Dropbox/.elfeed"
                  elfeed-search-title-max-width 100))

  (defun mkm-elfeed()
    "Setup elfeed-org and fetch new feeds"
    (interactive)
    (elfeed-org)
    (elfeed)
    (delete-other-windows)
    (elfeed-search-fetch())
    (goto-char (point-min)))
#+end_src
** Elfeed-org
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-org
      :ensure t
      :defer t)
#+END_SRC

** FCI mode
#+BEGIN_SRC emacs-lisp
  (use-package fill-column-indicator
    :commands (fci-mode)
    :config
    (setq fci-rule-column 85))
#+END_SRC

** Fly-Check
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t)
#+END_SRC
** flycheck-package
    This library provides a flycheck checker for the metadata in Emacs Lisp files
    which are intended to be packages. That metadata includes the package
    description, its dependencies and more. The checks are performed by the
    separate package-lint library.

    #+BEGIN_SRC emacs-lisp
      (use-package flycheck-package
        :ensure t
        :requires flycheck
        :config (flycheck-package-setup))
    #+END_SRC
** Fly-spell
    #+BEGIN_SRC emacs-lisp
      (use-package flyspell
        :ensure t
        :hook (prog-mode-hook .flyspell-prog-mode)
        :config (setq flyspell-issue-message-flag t))
    #+END_SRC
** Go mode
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :mode "\\.go"
    :hook (before-save . gofmt-before-save)
    :config
    (defun my-go-mode-hook ()
      (setq gofmt-command "goimports")
      (lsp-go-enable)
      (yas-minor-mode)
      ;; Customize compile command to run go build
      (if (not (string-match "go" compile-command))
          (set (make-local-variable 'compile-command)
               "go build -v && go test -v -race && go vet")))

    (add-hook 'go-mode-hook 'my-go-mode-hook))
#+END_SRC
** Helm company
#+BEGIN_SRC emacs-lisp
  (use-package helm-company
    :ensure t)
#+END_SRC
** Helm godoc
    #+BEGIN_SRC emacs-lisp
      (use-package helm-go-package
        :ensure t)
    #+END_SRC

** Helm mode
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :diminish helm-mode
    :ensure t
    :init (progn
            (require 'helm-config)
            (setq helm-candidate-number-limit 100)
            ;; From https://gist.github.com/antifuchs/9238468
            (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
                  helm-input-idle-delay 0.01  ; this actually updates things
                                          ; reeeelatively quickly.
                  helm-yas-display-key-on-candidate t
                  helm-quick-update t)
            (helm-mode)
            (use-package helm-swoop
              :ensure t
              :bind ("M-i" . helm-swoop)))
    :bind (("C-x b" . helm-mini)
           ("C-h a" . helm-apropos)
           ("M-y" . helm-show-kill-ring)
           ("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files))
    :config (define-key helm-map (kbd "TAB" ) 'helm-execute-persistent-action ))
  (ido-mode -1) ;; Turn off ido mode.
#+END_SRC
** HTMLize
    #+BEGIN_SRC emacs-lisp
      (use-package htmlize
        :ensure t)
    #+END_SRC
** Interleave
    #+BEGIN_SRC emacs-lisp
      (use-package interleave
        :ensure t)
    #+END_SRC
** influx
    #+BEGIN_SRC emacs-lisp
      (use-package influx)
    #+END_SRC

** Jedi
    #+BEGIN_SRC emacs-lisp
      (use-package company-jedi
        :ensure t
        :hook (python-mode-hook . jedi:setup)
        :config (setq jedi:complete-on-dot t
                      jedi:use-shortcuts t))
    #+END_SRC

** Jenkins-mode
#+BEGIN_SRC emacs-lisp
  (use-package jenkins
    :ensure t
    :init (progn
            (setq jenkins-url "http://jenkins")
            (setq jenkins-username "manojm321")))
#+END_SRC
** Indium
    #+BEGIN_SRC emacs-lisp
      (use-package js2-mode
        :ensure t)
      (use-package indium
        :requires js2-mode
        :ensure t)
    #+END_SRC
** Kapacitor
    #+BEGIN_SRC emacs-lisp
      (use-package kapacitor
        :ensure t)
    #+END_SRC
** tickscript-mode
#+BEGIN_SRC emacs-lisp
  (use-package tickscript-mode
    :ensure t)
#+END_SRC
** keyfreq
    #+BEGIN_SRC emacs-lisp
      (use-package keyfreq
        :ensure t
        :config (setq keyfreq-mode 1
                      keyfreq-autosave-mode 1))
    #+END_SRC
** Ledger-cli
#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :ensure t
    :config (setq ledger-reports
                  (quote
                   (("bal" "%(binary) -f %(ledger-file) bal")
                    ("reg" "%(binary) -f %(ledger-file) reg")
                    ("payee" "%(binary) -f %(ledger-file) reg @%(payee)")
                    ("account-reg" "%(binary) -f %(ledger-file) reg --tail 30 %(account)")
                    ("account-bal" "%(binary) -f %(ledger-file) bal %(account)")))
                  ledger-report-is-reversed t)
    :mode "\\.dat$")
#+END_SRC

** LSP mode
    #+BEGIN_SRC emacs-lisp
    (use-package "lsp-mode"
    :ensure t)
    #+END_SRC

** LSP go
    #+BEGIN_SRC emacs-lisp
    (use-package "lsp-go"
    :ensure t)
    #+END_SRC
** Magit
#+begin_src emacs-lisp
  ;; Pushing to explicit refs is a multi step process. This function adds push review
  ;; git command to push to gerrits magic branch refs/for/master. Review remote should
  ;; be define in .git/config
  (defun magit-push-to-gerrit-spidar ()
    (interactive)
    (magit-git-command-topdir "git push review"))

  (use-package magit
    :bind ("C-c g" . magit-status)
    :custom (magit-diff-highlight-hunk-body nil)
    :hook (git-commit-setup . (lambda () (setq fill-column 80)(git-commit-turn-on-flyspell)))
    :pin melpa-stable
    :config
    (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)
    (magit-define-popup-action 'magit-push-popup ?g "push to spidar" 'magit-push-to-gerrit-spidar)
    (magit-define-popup-action 'magit-push-popup ?b "push to btc" 'magit-push-to-gerrit-btc))
#+end_src

*** Fullscreen magit
#+begin_src emacs-lisp
  ;; full screen magit-status
  (defadvice magit-status (around magit-fullscreen activate)
      (window-configuration-to-register :magit-fullscreen)
      ad-do-it
      (delete-other-windows))

  (defun magit-quit-session ()
      "Restores the previous window configuration and kills the magit buffer"
      (interactive)
      (kill-buffer)
      (jump-to-register :magit-fullscreen))
#+end_src

** Highlight indent
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :ensure t
    :config (setq highlight-indent-guides-method 'character))
#+END_SRC
    
** Markdown mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC

** Matlab
    #+BEGIN_SRC emacs-lisp
      (use-package matlab-mode
        :ensure t
        :mode "\\.m$"
        :init (progn
                (setq matlab-indent-function t)
                (setq matlab-shell-command "/Applications/MATLAB_R2012b.app/bin/matlab")
                (setq matlab-shell-command-switches (list "-nodesktop" "-nosplash"))))
    #+END_SRC
** Mu4e
#+BEGIN_SRC emacs-lisp
  ;; this path should have mu4e and org-mu4e
  (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu/mu4e")
  (use-package mu4e
    :bind (("C-c m" . mu4e))
    :config (setq mu4e-index-cleanup nil      ;; don't do a full cleanup check
                  mu4e-index-lazy-check t    ;; don't consider up-to-date dirs
                  mu4e-maildir   "~/mbsync"
                  mu4e-sent-folder "/[Gmail].Sent Mail"
                  mu4e-drafts-folder "/[Gmail].Drafts"
                  mu4e-trash-folder "/[Gmail].Trash"
                  mu4e-refile-folder "/[Gmail].Archive"
                  mu4e-confirm-quit nil
                  mu4e-view-show-images t
                  mu4e-sent-messages-behavior 'sent
                  mu4e-get-mail-command "mbsync gmail"
                  mu4e-attachment-dir  "~/Downloads"
                  mu4e-view-show-images t
                  mu4e-headers-results-limit 500
                  mu4e-update-interval 300
                  mu4e-hide-index-messages t
                  mu4e-headers-include-related nil
                  mu4e-headers-date-format "%y/%m/%d %H:%M:%S"
                  mu4e-headers-fields '((:date . nil)
                                        (:flags . 6)
                                        (:recipnum)
                                        (:mailing-list . 20)
                                        (:from-or-to . 20)
                                        (:subject))
                  mu4e-view-prefer-html nil))

  (advice-add 'mu4e~headers-quit-buffer :after 'bury-buffer)

  (add-hook 'mu4e-view-mode-hook 'visual-line-mode)
  (add-hook 'mu4e-view-mode-hook
            (lambda()
              ;; try to emulate some of the eww key-bindings
              (local-set-key (kbd "<tab>") 'shr-next-link)
              (local-set-key (kbd "<backtab>") 'sdhr-previous-link)))

  (add-hook 'mu4e-compose-mode-hook
            (defun mkm-compose-message-setting ()
              "My settings for message composition."
              (set-fill-column 72)
              (flyspell-mode)))

  (setq shr-color-visible-luminance-min 50)

  (use-package org-mu4e
    :config (setq org-mu4e-convert-to-html t))

  (defun compose-attach-marked-files ()
    "Compose mail and attach all the marked files from a dired buffer."
    (interactive)
    (let ((files (dired-get-marked-files)))
      (compose-mail nil nil nil t)
      (dolist (file files)
        (if (file-regular-p file)
            (mml-attach-file file
                             (mm-default-file-encoding file)
                             nil "attachment")
          (message "skipping non-regular file %s" file)))))
  (progn
    (add-to-list 'mu4e-bookmarks (make-mu4e-bookmark
                                  :name "Unread posts addressed to me"
                                  :query "recip:manojm321 flag:unread AND NOT flag:trashed"
                                  :key ?m))
    (add-to-list 'mu4e-bookmarks (make-mu4e-bookmark
                                  :name "Unread Influxdata posts addressed to me"
                                  :query "s:InfluxData flag:unread"
                                  :key ?d))
    (add-to-list 'mu4e-bookmarks (make-mu4e-bookmark
                                  :name "Unread posts from spidar"
                                  :query "from:spidar flag:unread"
                                  :key ?s))
    (add-to-list 'mu4e-bookmarks (make-mu4e-bookmark
                                  :name "Unread review requests"
                                  :query "\( s:Change in OR s:Review Request \)AND flag:unread"
                                  :key ?r))
    (add-to-list 'mu4e-bookmarks (make-mu4e-bookmark
                                  :name "Invitations"
                                  :query "s:Invitation AND flag:unread"
                                  :key ?i))
    (add-to-list 'mu4e-bookmarks (make-mu4e-bookmark
                                  :name "Unread Cron messages"
                                  :query "s:Cron AND flag:unread"
                                  :key ?c)))
#+END_SRC

** Mu4e-alert
    #+BEGIN_SRC emacs-lisp
      (use-package mu4e-alert
        :ensure t
        :config (progn
                  (setq mu4e-alert-interesting-mail-query
                        "recip:manojm321 flag:unread date:7d..now AND NOT flag:trashed")
                  (mu4e-alert-enable-mode-line-display)))
    #+END_SRC
** Mu4e-conversation
    #+BEGIN_SRC emacs-lisp
      (use-package mu4e-conversation
        :requires mu4e
        :ensure t
        :config (global-mu4e-conversation-mode))
    #+END_SRC
** protbuf-mode
    #+BEGIN_SRC emacs-lisp
      (use-package protobuf-mode
        :ensure t)
    #+END_SRC
** Org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :bind (("C-c a" . org-agenda)
           ("C-c c" . org-capture)
           ("M-m" . back-to-indentation))
    :custom-face  '((org-block-begin-line ((t (:background "gray22" :foreground "gray50" :height 0.9))))
                    (org-block-end-line ((t (:background "gray22" :foreground "gray50" :height 0.9)))))
    :config (setq org-directory '("~/Dropbox/org")
                  org-agenda-files '("~/Dropbox/org/")
                  org-agenda-text-search-extra-files '(agenda-archives)
                  org-blank-before-new-entry '((heading) (plain-list-item))
                  org-enforce-todo-dependencies t
                  org-log-done 'time
                  org-log-redeadline 'time
                  org-log-reschedule 'time
                  org-confirm-babel-evaluate nil
                  org-log-redeadline 'time
                  org-src-tab-acts-natively t
                  org-use-speed-commands t
                  org-src-fontify-natively t
                  org-capture-templates
                  '(("a" "Appointment" entry (file  "~/Dropbox/org/gcal.org" )
                     "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
                    ("e" "Capture email as TODO" entry (file "~/Dropbox/org/todo.org")
                     "* TODO %?\n\n%a\n" :empty-lines-after 2 :prepend t)
                    ("l" "Capture a link from clipboard" entry (file "~/Dropbox/org/notes.org")
                     (function mkm-org-capture/link)  :empty-lines-after 2 :prepend t)
                    ("r" "Read about this later." entry (file "~/Dropbox/org/notes.org")
                     "* TODO %?\n\n" :empty-lines-after 2 :prepend t)
                    ("m" "Meeting notes automatically clocks in" entry (file "~/Dropbox/org/todo.org" )
                     "* %?\t%^g\n\n\s\s-" :empty-lines-after 2 :prepend t :clock-in t)
                    ("t" "Capture a TODO task" entry (file "~/Dropbox/org/todo.org")
                     (function mkm-org-capture-todo) :empty-lines-after 2 :prepend t)
                    ("a" "Areview feedback" plain (file+function "~/Dropbox/org/review.org" areview-ask-location)
                     "   - %?" :empty-lines 0)
                    ("f" "Capture a elfeed to notes" entry (file "~/Dropbox/org/notes.org")
                     (function mkm-elfeed/capture) :empty-lines-after 2 :prepend t)
                    ("h" "Capture a habit" plain (file "~/Dropbox/accounting/timelog.dat")
                     (function mkm-org-capture/activity) :immediate-finish t)
                    ("p" "Capture a TODO task" entry (file "~/Dropbox/org/personal.org")
                     "* TODO %?\n\s\s- " :empty-lines-after 2 :prepend t))))

  (run-with-idle-timer 60 t (lambda ()
                              (org-agenda-maybe-redo)))

  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'auto-fill-mode)

  ;; mark bold text in red color
  (add-to-list 'org-emphasis-alist '("*" (:foreground "red")))

  (defun air-org-skip-subtree-if-priority (priority)
    "Skip an agenda subtree if it has a priority of PRIORITY.
        PRIORITY may be one of the characters ?A, ?B, or ?C."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 1000 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
        nil)))

  (setq org-agenda-custom-commands
        '(("d" "Custom daily agenda"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("DONE" "WAIT" "VRFY" "BNWD" "IGNR"))
                                                  (org-agenda-skip-if nil '(scheduled deadline))))
                   (org-agenda-overriding-header "Just do it:")))
            (tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo '("DONE" "TODO" "BNWD" "IGNR"))
                                                  (org-agenda-skip-if nil '(scheduled deadline))))
                   (org-agenda-overriding-header "Waiting:")))
            (agenda "" ((org-agenda-span 'day)))
            (alltodo "" ((org-agenda-skip-function '(or (air-org-skip-subtree-if-priority ?A)
                                                        (org-agenda-skip-if nil '(scheduled deadline))))
                         (org-agenda-overriding-header "ALL tasks:"))))
           ((org-agenda-files '("~/Dropbox/org/gcal.org"
                                "~/Dropbox/org/todo.org"))))))

  (defun mkm-org/read-entry()
    "Read a notes entry with webpage and notes TODO side-by-side"
    (interactive)
    (let*  ((url-prop (org-entry-properties nil "URL"))
            (pdf-prop (org-entry-properties nil "INTERLEAVE_PDF")))
      (progn
        (cond (pdf-prop
               (interleave-mode))
              (url-prop
               (let* ((url (cdr (assoc "URL" url-prop))))
                 (if (string-match-p (regexp-quote "youtube.com") url)
                     (browse-url url)
                   (progn
                     (org-narrow-to-subtree)
                     (delete-other-windows)
                     (split-window-right)
                     (eww url)))))))))

    (defun mkm-elfeed/capture ()
      (let ((entry (elfeed-search-selected :single)))
        (concat "* TODO "
                (elfeed-entry-title entry)
                "\n\s\s:PROPERTIES:\n\s\s:URL: "
                (elfeed-entry-link entry)
                "\n\s\s:END:\n")))

    (defun mkm-elfeed/play-video ()
      (interactive)
      (let* ((entry (elfeed-search-selected :single))
             (url (elfeed-entry-link entry)))
        (elfeed-search-untag-all-unread)
        (start-process "vlc" "*vlc*"
                       "/Applications/VLC.app/Contents/MacOS/VLC" url)))


    (define-key elfeed-search-mode-map "v" #'mkm-elfeed/play-video)

    (defun mkm-org-capture/activity ()
      (let ((activity (read-string "Activity: " ))
            (minutes (read-number "Minutes: " )))
        (concat "i "
                (format-time-string "%Y/%m/%d %H:%M:%S"
                                    (time-subtract (current-time)
                                                   (seconds-to-time (* minutes 60))))
                " "
                activity
                "\no "
                (format-time-string "%Y/%m/%d %H:%M:%S")
                " done" )))

    (defun mkm-org-capture/link ()
      "Make a TODO entry with a link in clipboard. Page title is used as task heading."
      (let* ((url-string (s-trim (x-get-clipboard)))
             (pdf (string-suffix-p "pdf" url-string)))
        (unless pdf
          (let ((page-title (org-web-tools--html-title (org-web-tools--get-url url-string))))
            (concat "* TODO "
                    page-title
                    "\n\s\s:PROPERTIES:\n\s\s:URL: "
                    url-string
                    "\n\s\s:END:\n\n\s\s- %?")))))


    (setq org-export-with-author nil)
    (setq org-export-with-date nil)
    (setq org-export-with-toc nil)
    (setq org-export-with-creator nil)
   #+END_SRC
** org-bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
   :ensure t
   :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

#+END_SRC
** org-gcal
   #+BEGIN_SRC emacs-lisp
     (use-package org-gcal
        :ensure t
        :config (run-with-timer 0 (* 60 60) #'org-gcal-sync))
   #+END_SRC
** Org-journal
#+BEGIN_SRC emacs-lisp
(use-package org-journal
   :ensure t
   :config
   (setq org-journal-dir "~/Dropbox/Notes/journal/"))
#+END_SRC

** org-pdfview
   #+BEGIN_SRC emacs-lisp
   (use-package org-pdfview
   :ensure t
   :config
   (add-to-list 'org-file-apps '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open link)))))
   #+END_SRC
** org-rifle
   #+BEGIN_SRC emacs-lisp
     (use-package helm-org-rifle
       :ensure t)
   #+END_SRC
** org-web-tools
   - Provides useful functions to work with web pages. Ex: extract title
#+BEGIN_SRC emacs-lisp
(use-package org-web-tools
   :ensure t)
#+END_SRC
** ov
   #+BEGIN_SRC emacs-lisp
   (use-package ov
    :ensure t)
   #+END_SRC
** PDB
#+BEGIN_SRC emacs-lisp
  (use-package pdb-mode
    :ensure t)
#+END_SRC
** pdf tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :bind (:map pdf-view-mode-map
          ("o" . pdf-outline)
          ("M-g g" . pdf-view-goto-label)
          ("M" . pdf-view-midnight-minor-mode))
    :config
      (progn
        (setq pdf-tools-handle-upgrades nil) ; Use brew upgrade pdf-tools instead.
        (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo"))
        (pdf-tools-install t))
#+END_SRC
** Rainbow-identifiers
   #+BEGIN_SRC emacs-lisp
   (use-package rainbow-identifiers
     :ensure t)
   #+END_SRC
** Recentf
#+begin_src emacs-lisp
(use-package recentf
  :config
  (recentf-mode t)
  (setq recentf-max-saved-items 200))
#+end_src
** Rust
   #+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :hook (rust-mode-hook . rust-format-buffer)
    :ensure t)
  (use-package flycheck-rust
    :ensure t)
  (use-package cargo
    :ensure t
    :requires rust-mode
    :hook (rust-mode-hook . cargo-minor-mode))
   #+END_SRC
** Winner mode
Winner mode allows you to undo/redo changes to window changes in Emacs.
#+begin_src emacs-lisp
(use-package winner
  :config
  (winner-mode t))
#+end_src

** YAML mode
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
   :ensure t
   :mode "\\.yaml$")
#+END_SRC

** Undo tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :diminish undo-tree-mode
  :config (global-undo-tree-mode))
#+END_SRC

** wordnut
   #+BEGIN_SRC emacs-lisp
     (use-package wordnut
        :ensure t
        :bind (("C-c d" . wordnut-search)))
   #+END_SRC
* Shell

#+BEGIN_SRC emacs-lisp
  (setq eshell-prompt-function
        (lambda ()
          (concat
           (propertize "┌─[" 'face `(:foreground "green"))
           (propertize (user-login-name) 'face `(:foreground "red"))
           (propertize "@" 'face `(:foreground "green"))
           (propertize (car (split-string (system-name) "\\." t)) 'face `(:foreground "blue"))
           (propertize "]──[" 'face `(:foreground "green"))
           (propertize (format-time-string "%H:%M" (current-time)) 'face `(:foreground "yellow"))
           (propertize "]──[" 'face `(:foreground "green"))
           (propertize (concat (eshell/pwd)) 'face `(:foreground "white"))
           (propertize "]\n" 'face `(:foreground "green"))
           (propertize "└─>" 'face `(:foreground "green"))
           (propertize (if (= (user-uid) 0) " # " " $ ") 'face `(:foreground "green")))))

  (defun myshell (arg)
    (interactive "c")
    (if (or (< arg 32) (> arg 126))
        (error "Please use printable character for shell name"))
    (let* ((buffer (get-buffer (format "*eshell*<%c>" arg))))
      (if buffer
          (switch-to-buffer buffer)
        (progn
          (eshell)
          (make-local-variable 'comint-input-sender)
          (rename-buffer (format "*eshell*<%c>" arg))))))
  (define-key global-map '[(meta ?z)] 'myshell)

  (add-hook 'comint-mode-hook
            (lambda nil
              (define-key (current-local-map) "\ep"
                'comint-previous-matching-input-from-input)
              (define-key (current-local-map) "\en"
                'comint-next-matching-input-from-input)))
#+END_SRC

* Re-create scratch buffer
    #+BEGIN_SRC emacs-lisp
      (defun my-get-scratch-buffer nil
        "Create/switch to a scratch buffer"
        (interactive)
        (switch-to-buffer (get-buffer-create "*scratch*"))
        (lisp-interaction-mode))
    #+END_SRC
* Custom func
** K8s log helpers
    #+BEGIN_SRC emacs-lisp
      (defun k8s-log-follow-cmd-string(pod)
        (concat "kubectl -n production logs -f " pod " &"))

      (defun k8logs(appname)
        (let* ((pods (shell-command-to-string
                      (concat "kubectl -n production get pods -o jsonpath -l app="
                              appname
                              " --template='{.items[*].metadata.name}'"))))
          (mapcar #'(lambda (pod)
                      (let* ((buffer-name (concat "*" pod "*")))
                        (shell-command
                         (k8s-log-follow-cmd-string pod)
                         buffer-name)
                        (pop-to-buffer buffer-name)))
                  (split-string pods))))
    #+END_SRC

** random info page
#+BEGIN_SRC emacs-lisp
  (defun info--get-node-count ()
    (save-excursion
      (let ((case-fold-search t)
            (count 0))
        (goto-char (point-min))
        (search-forward "\n* menu:" nil t)
        (while (search-forward "\n* " nil t)
          (setq count (1+ count)))
        count)))

  (defun my-emacs-info-random()
    "Fetch random info pages"
    (interactive)
    (info "emacs")
    (Info-goto-node (Info-extract-menu-counting
                     (random (info--get-node-count)))))
#+END_SRC

** Time helpers
#+BEGIN_SRC emacs-lisp
  (defun utc()
    (current-time-string (current-time) t))
  (defun india()
    (current-time-string (current-time) "Asia/Kolkata"))
#+END_SRC

** Gerrit Link
    #+BEGIN_SRC emacs-lisp
      (defun my-gerrit-link (filename lineno)
        (interactive (list (buffer-file-name) (line-number-at-pos)))
        (if-let ((repo (eshell/basename (string-trim (vc-find-root filename ".git") nil "/"))))
            (let* ((rpath (file-relative-name filename (vc-root-dir)))
                   (gitblit-url (format "%s/plugins/gitiles/%s/+/master/%s#%d"
                                        arista-gerrit-url
                                        repo
                                        rpath
                                        lineno)))
              (message "%s (copied to clipboard)" gitblit-url)
              (kill-new gitblit-url))
          (message "No git repo root detected")))
    #+END_SRC
** Pinned buffer mode
   #+BEGIN_SRC emacs-lisp
     (define-minor-mode pinned-buffer-mode
       "Pin the current buffer to the selected window."
       nil " P" nil
       (set-window-dedicated-p (selected-window) pinned-buffer-mode))
   #+END_SRC

** Org overview
   #+BEGIN_SRC emacs-lisp
     (defun my-org-overview ()
         ""
        (interactive)
         (occur "^\\(\\*+\\|#\\+name\\)"))
   #+END_SRC

** Copy buffer/region with pb
   #+BEGIN_SRC emacs-lisp
     (defun my-pb-copy ()
       "Share entire buffer/region with pb. URL is copied to clipboard"
       (interactive)
       (let ((temp-file (make-temp-file ".sharing.")))
         (if (region-active-p)
             (write-region (point) (mark) temp-file)
           (write-region (point-min) (point-max) temp-file))
         (shell-command (format "curl -X POST -F c=@%s  pb 2>/dev/null| grep url: | cut -b 6-" temp-file) " sharing")
         (with-current-buffer " sharing"
           (clipboard-kill-ring-save (point-min) (point-max)))
         (dired-delete-file temp-file)))
   #+END_SRC
