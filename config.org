* Emacs Configuration

I have been using Emacs extensively since Jan of 2014. Thanks to some awesome
emacser's at my current company I have learnt a great deal about it. I remember my
days of struggle while learning emacs, but now all the hard work has paid off and I
*absolutely love* EMACS!

I use [[https://github.com/jwiegley/use-package][use-package]] to manage my emacs config.

* Arista Specific
** Arastra library

#+BEGIN_SRC emacs-lisp
;; load this only on arista server
(when (and (getenv "HOSTNAME") (string-match "arista" (getenv "HOSTNAME")))

   ;; Use separate emacs daemon for each project.
   (if (getenv "WP")
      (setq server-name (getenv "WP")))

   (load-library "arastra-indent")

   ;; Integration with a4, for checking files out and for
   ;; compiling/running/debugging within emacs.
   (load-library "a4")

   ;; Support for gnu id-utils
   (autoload 'gid "id-utils" "Lookup a string in a mkid database" t)

   ;; Arista gid extensions
   (load-library "a4-gid")

   ;; Some little useful functions like C-ct for a timestamp
   (load-library "arastra-utils")
   (load-library "cp-utils")

   ;; Aformat mode
   (use-package aformat-mode
      :diminish aformat-mode)

   ;; Bug Mode
   (use-package "bug-mode"
      :bind  (("C-x g g" . bug-goto)
              ("C-x g d" . bug-describe-change)))

   ;; Abuild mode
   (use-package "abuild" )

   (defun p4-write-attempt (data context caller)
   ; If it's a buffer that has a filename (not a special buffer like
   ; *Messages* or *Completions*) and it's read-only and you wrote to it
   (if (and (buffer-file-name) (eq 'buffer-read-only (car data)))
      ; And the user wants to checked out
      (if (y-or-n-p "Checkout in Perforce?")
      (a4-edit (buffer-file-name)) ) ) )
   (setq command-error-function 'p4-write-attempt)

   ;; Arista copy utils
   (global-set-key (kbd "C-x c p") 'cp-cur-word)
   (global-set-key (kbd "C-x c f") 'cp-cur-file-name)
   (global-set-key (kbd "C-x c w") 'cp-which-func)

   ;; a4-changes mode
   (use-package "a4-changes" )

   ;; Open tasks.org
   (global-set-key (kbd "C-c t")
      (lambda() (interactive)(find-file "~/Dropbox/Notes/Arista/tasks.org")))

   ;; Pylint compile
   (use-package "python-pylint"
      :bind (( "C-x y" . python-pylint)))

   ;; Inihibit Fsync
   (setq write-region-inhibit-fsync t)

   ;; PDB Hook 
   (defun my-shell-mode-hook ()
      (add-hook 'comint-output-filter-functions 'python-pdbtrack-comint-output-filter-function t))
   (add-hook 'shell-mode-hook 'my-shell-mode-hook)

 );;end arista specific changes
#+END_SRC

* Installing Emacs
I always use --with-imagemagick switch while installing, because I
read rss feeds in emacs.

On OSX
#+BEGIN_SRC sh
brew install emacs --with-imagemagick
#+END_SRC

* Defaults
Some are adopted from [[https://github.com/magnars][magnars(@emacsrocks)]]
#+BEGIN_SRC emacs-lisp

;; Keep all backup and auto-save files in one directory
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; Don't you dare to warn me!
(setq large-file-warning-threshold nil)

;; Allow pasting selection outside of Emacs
(setq x-select-enable-clipboard t)

;; Show keystrokes in progress
(setq echo-keystrokes 0.1)

;; Move files to trash when deleting
(setq delete-by-moving-to-trash t)

;; Real emacs knights don't use shift to mark things
(setq shift-select-mode nil)

;; Transparently open compressed files
(auto-compression-mode t)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; Remove text in active region if inserting text
(delete-selection-mode 1)

;; Always display line and column numbers
(setq line-number-mode t)
(setq column-number-mode t)

;; Lines should be 85 characters wide, not 72
(setq-default fill-column 85)

;; Never insert tabs
(set-default 'indent-tabs-mode nil)

;; Easily navigate sillycased words
(global-subword-mode 1)

;; Garbage collect every 400KB 
(setq gc-cons-threshold 400000)

;; Turn off the blinking cursor
(blink-cursor-mode -1)

;; Enable show parenthesis
(show-paren-mode t)

;; Just run my code.
(setq org-confirm-babel-evaluate nil)

;; Window movement, a gamer might recognize these key combinations!
(global-set-key (kbd "C-c i") 'windmove-up)
(global-set-key (kbd "C-c k") 'windmove-down)
(global-set-key (kbd "C-c l") 'windmove-right)
(global-set-key (kbd "C-c j") 'windmove-left)

;; Comment/un-comment
(global-set-key (kbd "C-c ;") 'comment-or-uncomment-region)

;; Compile Command
(global-set-key (kbd "C-x c c") 'compile)

(defun update-diff-colors ()
  "update the colors for diff faces"
  (set-face-attribute 'diff-added nil
                      :foreground "brightgreen"
                      :background nil)
  (set-face-attribute 'diff-removed nil
                      :foreground "brightred"
                      :background nil)
  (set-face-attribute 'diff-changed nil
                      :foreground "white"
                      :background nil)
  (set-face-attribute 'diff-refine-added nil
                      :foreground "Aquamarine"
                      :background "black")
  (set-face-attribute 'diff-refine-removed nil
                      :inherit nil
                      :foreground "Aquamarine"
                      :background nil)
  (set-face-attribute 'diff-refine-change nil
                      :foreground nil
                      :background "black")
  (set-face-attribute 'diff-hunk-header nil
                      :inherit nil
                      :foreground "yellow"
                      :background nil)
  (set-face-attribute 'diff-header nil
                      :foreground "color-69"
                      :background nil)
  (set-face-attribute 'diff-file-header nil
                      :foreground nil
                      :background nil))

(eval-after-load "diff-mode"
  '(update-diff-colors))

; Set location
(setq calendar-latitude 37.4)
(setq calendar-longitude -121.9)
(setq calendar-location-name "San Jose, CA")

; gofmt code
(add-hook 'before-save-hook #'gofmt-before-save)

; Load languages
(org-babel-do-load-languages 'org-babel-load-languages
    '(
        (shell . t)
        (python . t)
    )
)
#+END_SRC

* Packages
** Abbrev-mode

#+BEGIN_SRC emacs-lisp
(use-package abbrev
   :diminish abbrev-mode)
#+END_SRC
** Ace-jump-mode

#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
   :ensure t
   :bind ("C-c SPC" . ace-jump-mode))
#+END_SRC

** DockerFile-mode
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
    :ensure t)
#+END_SRC
** Elfeed
#+begin_src emacs-lisp
(use-package elfeed
   :ensure t
   :defer t
   :config (setq elfeed-db-directory "~/Dropbox/.elfeed"))
#+end_src
** elfeed-org
#+BEGIN_SRC emacs-lisp
(use-package elfeed-org
  :ensure t
  :defer t)
#+END_SRC
** FCI mode

#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
  :ensure t
  :config
  (setq fci-rule-column 85))
#+END_SRC

** Helm mode

#+BEGIN_SRC emacs-lisp
(use-package helm
  :diminish helm-mode
  :ensure t
  :init (progn
          (require 'helm-config)
          (setq helm-candidate-number-limit 100)
          ;; From https://gist.github.com/antifuchs/9238468
          (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01  ; this actually updates things
                                      ; reeeelatively quickly.
          helm-yas-display-key-on-candidate t
          helm-quick-update t)
          (helm-mode)
          (use-package helm-swoop
          :ensure t
          :bind ("M-i" . helm-swoop)))
  :bind (("C-c h" . helm-mini)
         ("C-h a" . helm-apropos)
         ("C-x b" . helm-buffers-list)
         ("M-y" . helm-show-kill-ring)
         ("M-x" . helm-M-x)
         ("M-i" . helm-swoop)
         ("C-x C-f" . helm-find-files))
  :config (define-key helm-map (kbd "TAB" ) 'helm-execute-persistent-action ))
(ido-mode -1) ;; Turn off ido mode.
#+END_SRC
** Kubernetes
   #+BEGIN_SRC emacs-lisp
   (use-package kubernetes
  :ensure t
  :commands (kubernetes-overview))
   #+END_SRC

** org-journal

#+BEGIN_SRC emacs-lisp
(use-package org-journal
   :ensure t
   :config
   (setq org-journal-dir "~/Dropbox/Notes/journal/"))
#+END_SRC

** Magit

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :defer t
  :bind ("C-c g" . magit-status)
  :config
  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
#+end_src

*** Fullscreen magit

#+begin_src emacs-lisp
;; full screen magit-status
(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))

(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen))
#+end_src
** Recentf

#+begin_src emacs-lisp
(use-package recentf
  :bind ("C-x C-r" . helm-recentf)
  :config
  (recentf-mode t)
  (setq recentf-max-saved-items 200))
#+end_src

** Winner mode

Winner mode allows you to undo/redo changes to window changes in Emacs.

#+begin_src emacs-lisp
(use-package winner
  :config
  (winner-mode t))
#+end_src

** Fly-Check
#+BEGIN_SRC emacs-lisp
(use-package flycheck
   :ensure t)
#+END_SRC

** ledger-cli

#+BEGIN_SRC emacs-lisp
(use-package ledger-mode
   :ensure t
   :mode "\\.dat$")

#+END_SRC

** markdown mode
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC
** helm company

#+BEGIN_SRC emacs-lisp
(use-package helm-company
:ensure t)

#+END_SRC
** jedi mode

#+BEGIN_SRC emacs-lisp
(use-package jedi
   :ensure t
   :config
   (progn
      (add-hook 'python-mode-hook 'jedi:setup)
      (setq jedi:complete-on-dot t)))
#+END_SRC

** YAML mode

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
   :ensure t
   :mode "\\.yaml$")
#+END_SRC
** Go mode
#+BEGIN_SRC emacs-lisp
(use-package go-mode
:ensure t
:config (add-hook 'before-save-hook #'gofmt-before-save))
#+END_SRC
** Highlight indent

#+BEGIN_SRC emacs-lisp
   (use-package highlight-indent-guides
   :ensure t
   :config (setq highlight-indent-guides-method 'character))
#+END_SRC

* Shell

#+BEGIN_SRC emacs-lisp
(defun myshell (arg)
  (interactive "c")
  (if (or (< arg 32) (> arg 126))
      (error "Please use printable character for shell name"))
  (let* ((buffer (get-buffer (format "*shell*<%c>" arg))))
    (if buffer
	(switch-to-buffer buffer)
      (progn
	(shell)
        (make-local-variable 'comint-input-sender)
	(rename-buffer (format "*shell*<%c>" arg))))))
(define-key global-map '[(meta ?z)] 'myshell)

(add-hook 'comint-mode-hook 
          (lambda nil
            (define-key (current-local-map) "\ep" 
              'comint-previous-matching-input-from-input)
            (define-key (current-local-map) "\en" 
              'comint-next-matching-input-from-input)))
#+END_SRC

