* Emacs Configuration

I have been using Emacs extensively since Jan of 2014. Thanks to some awesome
emacser's at my current company I have learnt a great deal about it. I remember my
days of struggle while learning emacs, but now all the hard work has paid off and I
*absolutely love* EMACS!

I use [[https://github.com/jwiegley/use-package][use-package]] to manage my emacs config.

* Arista Specific
** Arastra library

#+BEGIN_SRC emacs-lisp
;; load this only on arista server
(when (and (getenv "HOSTNAME") (string-match "arista" (getenv "HOSTNAME")))

   ;; Use separate emacs daemon for each project.
   (if (getenv "WP")
      (setq server-name (getenv "WP")))

   (load-library "arastra-indent")

   ;; Integration with a4, for checking files out and for
   ;; compiling/running/debugging within emacs.
   (load-library "a4")

   ;; Support for gnu id-utils
   (autoload 'gid "id-utils" "Lookup a string in a mkid database" t)

   ;; Arista gid extensions
   (load-library "a4-gid")

   ;; Some little useful functions like C-ct for a timestamp
   (load-library "arastra-utils")
   (load-library "cp-utils")

   ;; Aformat mode
   (use-package aformat-mode
      :diminish aformat-mode)

   ;; Bug Mode
   (use-package "bug-mode"
      :bind  (("C-x g g" . bug-goto)
              ("C-x g d" . bug-describe-change)))

   ;; Abuild mode
   (use-package "abuild" )

   (defun p4-write-attempt (data context caller)
   ; If it's a buffer that has a filename (not a special buffer like
   ; *Messages* or *Completions*) and it's read-only and you wrote to it
   (if (and (buffer-file-name) (eq 'buffer-read-only (car data)))
      ; And the user wants to checked out
      (if (y-or-n-p "Checkout in Perforce?")
      (a4-edit (buffer-file-name)) ) ) )
   (setq command-error-function 'p4-write-attempt)

   ;; Arista copy utils
   (global-set-key (kbd "C-x c p") 'cp-cur-word)
   (global-set-key (kbd "C-x c f") 'cp-cur-file-name)
   (global-set-key (kbd "C-x c w") 'cp-which-func)

   ;; a4-changes mode
   (use-package "a4-changes" )

   ;; Pylint compile
   (use-package "python-pylint"
      :bind (( "C-x y" . python-pylint)))

   ;; Inihibit Fsync
   (setq write-region-inhibit-fsync t)

   ;; PDB Hook 
   (defun my-shell-mode-hook ()
      (add-hook 'comint-output-filter-functions 'python-pdbtrack-comint-output-filter-function t))
   (add-hook 'shell-mode-hook 'my-shell-mode-hook)

 );;end arista specific changes
#+END_SRC

* Installing Emacs
I always use --with-imagemagick switch while installing, because I
read rss feeds in emacs.

On OSX
#+BEGIN_SRC sh
brew install emacs --with-cocoa --with-gnutls --with-rsvg --with-imagemagick
#+END_SRC

* Defaults
Some are adopted from [[https://github.com/magnars][magnars(@emacsrocks)]]
#+BEGIN_SRC emacs-lisp
  ;; Turn off GUI, because GUI makes you slow.
  (when window-system
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (tooltip-mode -1))

  (display-time)
  (setq display-time-format "%I:%M")
  ;; Hurts my ears
  (setq ring-bell-function 'ignore)

  ;; set font to 13pt
  (set-face-attribute 'default nil :height 110 :width 'normal)

  ;; Keep all backup and auto-save files in one directory
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  ;; Don't you dare to warn me!
  (setq large-file-warning-threshold nil)

  ;; Allow pasting selection outside of Emacs
  (setq x-select-enable-clipboard t)

  ;; Show keystrokes in progress
  (setq echo-keystrokes 0.1)

  ;; Move files to trash when deleting
  (setq delete-by-moving-to-trash t)

  ;; Real emacs knights don't use shift to mark things
  (setq shift-select-mode nil)

  ;; Transparently open compressed files
  (auto-compression-mode t)

  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Remove text in active region if inserting text
  (delete-selection-mode 1)

  ;; Always display line and column numbers
  (setq line-number-mode t)
  (setq column-number-mode t)

  ;; Lines should be 85 characters wide, not 72
  (setq-default fill-column 80)

  ;; Never insert tabs
  (set-default 'indent-tabs-mode nil)

  ;; Easily navigate sillycased words
  (global-subword-mode 1)

  ;; Garbage collect every 800KB
  (setq gc-cons-threshold 8000000)

  ;; Turn off the blinking cursor
  (blink-cursor-mode -1)

  ;; Enable show parenthesis
  (show-paren-mode t)

  ;; highlight current line
  (global-hl-line-mode t)

  ;; Window movement, a gamer might recognize these key combinations!
  (use-package windmove
    :bind (("C-c i" . windmove-up)
           ("C-c k" . windmove-down)
           ("C-c l" . windmove-right)
           ("C-c j" . windmove-left)))

  (use-package timeclock
    :bind (("C-c O" . timeclock-out)
           ("C-c I" . timeclock-in))
    :config (setq timeclock-file "~/Dropbox/accounting/timelog.dat"))

  (global-set-key (kbd "M-m") 'back-to-indentation)

  ;; Comment/un-comment
  (global-set-key (kbd "C-c ;") 'comment-or-uncomment-region)

  ;; Compile Command
  (global-set-key (kbd "C-c C-c") 'compile)

  (defun update-diff-colors ()
    "update the colors for diff faces"
    (set-face-attribute 'diff-added nil
                        :foreground "brightgreen"
                        :background nil)
    (set-face-attribute 'diff-removed nil
                        :foreground "brightred"
                        :background nil)
    (set-face-attribute 'diff-changed nil
                        :foreground "white"
                        :background nil)
    (set-face-attribute 'diff-refine-added nil
                        :foreground "Aquamarine"
                        :background "black")
    (set-face-attribute 'diff-refine-removed nil
                        :inherit nil
                        :foreground "Aquamarine"
                        :background nil)
    (set-face-attribute 'diff-refine-change nil
                        :foreground nil
                        :background "black")
    (set-face-attribute 'diff-hunk-header nil
                        :inherit nil
                        :foreground "yellow"
                        :background nil)
    (set-face-attribute 'diff-header nil
                        :foreground "color-69"
                        :background nil)
    (set-face-attribute 'diff-file-header nil
                        :foreground nil
                        :background nil))

  (eval-after-load "diff-mode"
    '(update-diff-colors))

  ; Set location
  (setq calendar-latitude 37.4)
  (setq calendar-longitude -121.9)
  (setq calendar-location-name "San Jose, CA")

  ;; set global line highlight mode
  (setq global-hl-line-mode t)

  ; Load languages
  (org-babel-do-load-languages 'org-babel-load-languages
      '(
          (sh . t)
          (python . t)
          (influxdb . t)
          (sql . t)
          (emacs-lisp . t)
      )
  )

  ;;timelog file


  ;;Donot use proportional fonts
  (setq shr-use-fonts nil)
#+END_SRC

* Theme
** Zerodark theme
  #+BEGIN_SRC emacs-lisp
  (when window-system
    (use-package zerodark-theme
       :ensure t
       :config (zerodark-setup-modeline-format)))
  #+END_SRC
   #+END_SRC
* Packages
** Abbrev-mode
#+BEGIN_SRC emacs-lisp
(use-package abbrev
   :diminish abbrev-mode)
#+END_SRC

** Ace-jump-mode
#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
   :ensure t
   :bind ("C-c SPC" . ace-jump-mode))
#+END_SRC

** Autocomplete mode
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :commands auto-complete-mode
  :init
  (progn
    (auto-complete-mode t))
  :config
  (progn
    (use-package auto-complete-config)

    (ac-set-trigger-key "TAB")
    (ac-config-default)

    (setq ac-delay 0.02)
    (setq ac-use-menu-map t)
    (setq ac-menu-height 50)
    (setq ac-use-quick-help nil)
    (setq ac-comphist-file  "~/.emacs.d/ac-comphist.dat")
    (setq ac-ignore-case nil)
    (setq ac-dwim t)
    (setq ac-fuzzy-enable t)

    (use-package ac-dabbrev
      :config
      (progn
        (add-to-list 'ac-sources 'ac-source-dabbrev)))

    (setq ac-modes '(css-mode
                     emacs-lisp-mode
                     go-mode
                     lisp-interaction-mode
                     lisp-mode
                     makefile-mode
                     python-mode
                     sh-mode))))
#+END_SRC

** Dictionary
#+BEGIN_SRC emacs-lisp
  (use-package dictionary
    :bind (("C-c d" . dictionary-lookup-definition))
    :ensure t)
#+END_SRC
** DockerFile-mode
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
    :ensure t)
#+END_SRC

** Docker
   #+BEGIN_SRC emacs-lisp
   (use-package docker
   :ensure t
   :init
   (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
   (setq exec-path (append exec-path '("/usr/local/bin")))
   (setenv "DOCKER_TLS_VERIFY" "1")
   (setenv "DOCKER_HOST" "tcp://192.168.99.100:2376")
   (setenv "DOCKER_CERT_PATH" "/Users/manojm321/.docker/machine/machines/default")
   (setenv "DOCKER_MACHINE_NAME" "default"))
   #+END_SRC
** Docker tramp
   #+BEGIN_SRC emacs-lisp
     (use-package docker-tramp
        :ensure t)
   #+END_SRC
** Elfeed
#+begin_src emacs-lisp
  (use-package elfeed
    :ensure t
    :custom-face (elfeed-search-title-face ((t (:foreground "#c678dd" :height 1.2))))
    :config (setq elfeed-db-directory "~/Dropbox/.elfeed"
                  elfeed-search-title-max-width 100))

  (defun mkm-elfeed()
    "Setup elfeed-org and fetch new feeds"
    (interactive)
    (elfeed-org)
    (elfeed)
    (delete-other-windows)
    (elfeed-search-fetch())
    (goto-char (point-min)))
#+end_src

** Elfeed-org
#+BEGIN_SRC emacs-lisp
(use-package elfeed-org
  :ensure t
  :defer t)
#+END_SRC

** FCI mode
#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
  :ensure t
  :config
  (setq fci-rule-column 85))
#+END_SRC

** Fly-Check
#+BEGIN_SRC emacs-lisp
(use-package flycheck
   :ensure t)
#+END_SRC

** Go Guru
#+BEGIN_SRC emacs-lisp
(use-package go-guru
  :ensure t
  :custom-face (go-guru-hl-identifier-face ((t (:underline t))))
  :config (add-hook 'go-mode-hook #'go-guru-hl-identifier-mode))
#+END_SRC
** Go mode
#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :ensure t
  :config
    (defun my-go-mode-hook ()
      ; Use goimports instead of go-fmt
      (setq gofmt-command "goimports")
      ; Call Gofmt before saving
      (add-hook 'before-save-hook 'gofmt-before-save)
      ; Customize compile command to run go build
      (if (not (string-match "go" compile-command))
        (set (make-local-variable 'compile-command)
          "go build -v && go test -v -race && go vet")))

    (add-hook 'go-mode-hook 'my-go-mode-hook))
#+END_SRC

** Go Autocomplete
#+BEGIN_SRC emacs-lisp
(use-package go-autocomplete
  :ensure t
  :requires go-mode
  :config
    (defun auto-complete-for-go ()
      (auto-complete-mode 1))
    (add-hook 'go-mode-hook 'auto-complete-for-go))
#+END_SRC

** Helm company
#+BEGIN_SRC emacs-lisp
(use-package helm-company
:ensure t)
#+END_SRC

** Helm mode
#+BEGIN_SRC emacs-lisp
(use-package helm
  :diminish helm-mode
  :ensure t
  :init (progn
          (require 'helm-config)
          (setq helm-candidate-number-limit 100)
          ;; From https://gist.github.com/antifuchs/9238468
          (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01  ; this actually updates things
                                      ; reeeelatively quickly.
          helm-yas-display-key-on-candidate t
          helm-quick-update t)
          (helm-mode)
          (use-package helm-swoop
          :ensure t
          :bind ("M-i" . helm-swoop)))
  :bind (("C-c h" . helm-mini)
         ("C-h a" . helm-apropos)
         ("C-x b" . helm-buffers-list)
         ("M-y" . helm-show-kill-ring)
         ("M-x" . helm-M-x)
         ("M-i" . helm-swoop)
         ("C-x C-f" . helm-find-files))
  :config (define-key helm-map (kbd "TAB" ) 'helm-execute-persistent-action ))
(ido-mode -1) ;; Turn off ido mode.
#+END_SRC

** Interleave
   #+BEGIN_SRC emacs-lisp
   (use-package interleave
   :ensure t)
   #+END_SRC
** Jedi mode
#+BEGIN_SRC emacs-lisp
(use-package jedi
   :ensure t
   :config
   (progn
      (add-hook 'python-mode-hook 'jedi:setup)
      (setq jedi:complete-on-dot t)))
#+END_SRC

** Jenkins-mode
#+BEGIN_SRC emacs-lisp
(use-package jenkins
  :ensure t
  :init (progn
           (setq jenkins-url "http://jenkins")
           (setq jenkins-username "manojm321")))
#+END_SRC
** Indium
   #+BEGIN_SRC emacs-lisp
   (use-package js2-mode
   :ensure t)
   (use-package indium
   :requires js2-mode
   :ensure t)
   #+END_SRC
** tickscript-mode
#+BEGIN_SRC emacs-lisp
   (use-package tickscript-mode
     :ensure t)
#+END_SRC

** Kubernetes
#+BEGIN_SRC emacs-lisp
(use-package kubernetes
  :ensure t
  :custom (kubernetes-logs-arguments (quote ("--tail=500")))
  :commands (kubernetes-overview))
   #+END_SRC

** Ledger-cli
#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :ensure t
     :config '(ledger-reports
                (quote
                   (("bofa-bal" "%(binary) -f %(ledger-file) bal credit:bofa")
                   ("bal" "%(binary) -f %(ledger-file) bal")
                   ("reg" "%(binary) -f %(ledger-file) reg")
                   ("payee" "%(binary) -f %(ledger-file) reg @%(payee)")
                   ("account" "%(binary) -f %(ledger-file) reg %(account)"))))
     :mode "\\.dat$")
#+END_SRC

** Magit
#+begin_src emacs-lisp
  ;; Pushing to explicit refs is a multi step process. This function adds push review
  ;; git command to push to gerrits magic branch refs/for/master. Review remote should
  ;; be define in .git/config
  (defun magit-push-to-gerrit ()
    (interactive)
    (magit-git-command-topdir "git push review"))

  (use-package magit
    :ensure t
    :defer t
    :bind ("C-c g" . magit-status)
    :custom (magit-diff-highlight-hunk-body nil)
    :config
    (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)
    (magit-define-popup-action 'magit-push-popup
      ?g
      "push to gerrit"
      'magit-push-to-gerrit))
#+end_src

*** Fullscreen magit
#+begin_src emacs-lisp
;; full screen magit-status
(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))

(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen))
#+end_src

** Highlight indent
#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
   :ensure t
   :config (setq highlight-indent-guides-method 'character))
#+END_SRC
    
** Markdown mode
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC

** Matlab
   #+BEGIN_SRC emacs-lisp
   (use-package matlab-mode
     :ensure t
     :mode "\\.m$"
     :init (progn
              (setq matlab-indent-function t)
              (setq matlab-shell-command "/Applications/MATLAB_R2012b.app/bin/matlab")
              (setq matlab-shell-command-switches (list "-nodesktop" "-nosplash"))))
   #+END_SRC
** Mu4e
#+BEGIN_SRC emacs-lisp
  ;; this path should have mu4e and org-mu4e
  (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu/mu4e")
  (use-package mu4e
    :bind (("C-c m" . mu4e))
    :config (setq mu4e-index-cleanup nil      ;; don't do a full cleanup check
                  mu4e-index-lazy-check t    ;; don't consider up-to-date dirs
                  mu4e-maildir   "~/mbsync"
                  mu4e-sent-folder "/[Gmail].Sent Mail"
                  mu4e-drafts-folder "/[Gmail].Drafts"
                  mu4e-trash-folder "/[Gmail].Trash"
                  mu4e-refile-folder "/[Gmail].Archive"
                  mu4e-confirm-quit nil
                  mu4e-view-show-images t
                  mu4e-sent-messages-behavior 'sent
                  message-kill-buffer-on-exit t
                  mu4e-get-mail-command "mbsync gmail"
                  mu4e-attachment-dir  "~/Downloads"
                  mu4e-view-show-images t
                  mu4e-headers-results-limit 300
                  mu4e-update-interval 300
                  mu4e-hide-index-messages t
                  mu4e-headers-fields '((:human-date . 10)
                                         (:flags . 6)
                                         (:recipnum)
                                         (:mailing-list . 20)
                                         (:from-or-to . 20)
                                         (:subject))
                  mu4e-view-prefer-html nil))

  (advice-add 'mu4e~headers-quit-buffer :after 'bury-buffer)

  (add-hook 'mu4e-view-mode-hook 'visual-line-mode)
  (add-hook 'mu4e-view-mode-hook
            (lambda()
              ;; try to emulate some of the eww key-bindings
              (local-set-key (kbd "<tab>") 'shr-next-link)
              (local-set-key (kbd "<backtab>") 'shr-previous-link)))

  (add-hook 'mu4e-compose-mode-hook
            (defun mkm-compose-message-setting ()
              "My settings for message composition."
              (set-fill-column 72)
              (flyspell-mode)))

  (setq shr-color-visible-luminance-min 50)

  (use-package org-mu4e
    :config (setq org-mu4e-convert-to-html t))

  (defun compose-attach-marked-files ()
    "Compose mail and attach all the marked files from a dired buffer."
    (interactive)
    (let ((files (dired-get-marked-files)))
      (compose-mail nil nil nil t)
      (dolist (file files)
        (if (file-regular-p file)
            (mml-attach-file file
                             (mm-default-file-encoding file)
                             nil "attachment")
          (message "skipping non-regular file %s" file)))))
  (progn
    (add-to-list 'mu4e-bookmarks (make-mu4e-bookmark
                                  :name "Unread posts addressed to me"
                                  :query "recip:manojm321 flag:unread AND NOT flag:trashed"
                                  :key ?m))
    (add-to-list 'mu4e-bookmarks (make-mu4e-bookmark
                                  :name "Unread Influxdata posts addressed to me"
                                  :query "s:InfluxData flag:unread"
                                  :key ?d))
    (add-to-list 'mu4e-bookmarks (make-mu4e-bookmark
                                  :name "Unread posts from spidar"
                                  :query "from:spidar flag:unread"
                                  :key ?s))
    (add-to-list 'mu4e-bookmarks (make-mu4e-bookmark
                                  :name "Unread review requests"
                                  :query "\( s:Change in OR s:Review Request \)AND flag:unread"
                                  :key ?r))
    (add-to-list 'mu4e-bookmarks (make-mu4e-bookmark
                                  :name "Invitations"
                                  :query "s:Invitation AND flag:unread"
                                  :key ?i))
    (add-to-list 'mu4e-bookmarks (make-mu4e-bookmark
                                  :name "Unread Cron messages"
                                  :query "s:Cron AND flag:unread"
                                  :key ?c)))
#+END_SRC

** Mu4e-alert
   #+BEGIN_SRC emacs-lisp
   (use-package mu4e-alert
    :ensure t
    :config (progn
              (setq mu4e-alert-interesting-mail-query
                    "recip:manojm321 flag:unread date:7d..now AND NOT flag:trashed")
              (mu4e-alert-enable-mode-line-display)))
   #+END_SRC
** Org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :bind (("C-c a" . org-agenda)
           ("C-c c" . org-capture)
           ("M-m" . back-to-indentation))
    :custom-face  '((org-block-begin-line ((t (:background "gray22" :foreground "gray50" :height 0.9))))
                    (org-block-end-line ((t (:background "gray22" :foreground "gray50" :height 0.9)))))
    :config (setq org-directory '("~/Dropbox/org")
                   org-agenda-files '("~/Dropbox/org/")
                   org-agenda-text-search-extra-files '(agenda-archives)
                   org-blank-before-new-entry '((heading) (plain-list-item))
                   org-enforce-todo-dependencies t
                   org-log-done 'time
                   org-log-redeadline 'time
                   org-log-reschedule 'time
                   org-confirm-babel-evaluate nil
                   org-log-redeadline 'time
                   org-src-tab-acts-natively t
                   org-capture-templates
                   '(("a" "Appointment" entry (file  "~/Dropbox/org/gcal.org" )
                      "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
                     ("e" "Capture email as TODO" entry (file+headline "todo.org" "In")
                      "* TODO %?\n\n%a\n" :empty-lines-after 2 :prepend t)
                     ("l" "Capture a link from clipboard" entry (file "~/Dropbox/org/notes.org")
                      "* TODO %?%i\n\t:PROPERTIES:\n\t:URL: %c\n\t:END:\n%u" :empty-lines-after 2 :prepend t)
                     ("r" "Read about this later." entry (file "~/Dropbox/org/notes.org")
                      "* TODO %?\n\n" :empty-lines-after 2 :prepend t)
                     ("m" "Meeting notes" entry (file "~/Dropbox/org/meetings.org" )
                      "* %U %?" :empty-lines-after 2 :prepend t)
                     ("t" "Capture a TODO task" entry (file+headline "~/Dropbox/org/todo.org" "In")
                      "* TODO %?" :empty-lines-after 2 :prepend t)
                     ("p" "Capture a TODO task" entry (file+headline "~/Dropbox/org/todo.org" "In")
                      "* TODO %?" :empty-lines-after 2 :prepend t))))
    (add-hook 'org-mode-hook 'flyspell-mode)
    (add-hook 'org-mode-hook 'auto-fill-mode)

    (defun air-org-skip-subtree-if-priority (priority)
      "Skip an agenda subtree if it has a priority of PRIORITY.
  PRIORITY may be one of the characters ?A, ?B, or ?C."
      (let ((subtree-end (save-excursion (org-end-of-subtree t)))
            (pri-value (* 1000 (- org-lowest-priority priority)))
            (pri-current (org-get-priority (thing-at-point 'line t))))
        (if (= pri-value pri-current)
            subtree-end
          nil)))

    (setq org-agenda-custom-commands
          '(("d" "Daily agenda and TODOs except from notes.org"
             ((tags "PRIORITY=\"A\""
                    ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                     (org-agenda-overriding-header "High-priority unfinished tasks:")))
              (agenda "" ((org-agenda-ndays 1)))
              (alltodo "" ((org-agenda-skip-function '(or (air-org-skip-subtree-if-priority ?A)
                                                          (org-agenda-skip-if nil '(scheduled deadline))))
                           (org-agenda-overriding-header "ALL tasks:"))))
             ((org-agenda-files '("~/Dropbox/org/gcal.org"
                                  "~/Dropbox/org/todo.org"
                                  "~/Dropbox/org/meetings.org"))))
            ("a" "Daily agenda and all TODOs"
             ((tags "PRIORITY=\"A\""
                    ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                     (org-agenda-overriding-header "High-priority unfinished tasks:")))
              (agenda "" ((org-agenda-ndays 1)))
              (alltodo "" ((org-agenda-skip-function '(or (air-org-skip-subtree-if-priority ?A)
                                                          (org-agenda-skip-if nil '(scheduled deadline))))
                           (org-agenda-overriding-header "ALL tasks:")))))
            ("r" "Daily agenda and all TODOs"
             ((tags "PRIORITY=\"A\""
                    ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                     (org-agenda-overriding-header "High-priority unfinished tasks:")))
              (agenda "" ((org-agenda-ndays 1)))
              (alltodo "" ((org-agenda-skip-function '(or (air-org-skip-subtree-if-priority ?A)
                                                          (org-agenda-skip-if nil '(scheduled deadline))))
                           (org-agenda-overriding-header "ALL tasks:"))))
             ((org-agenda-files '("~/Dropbox/org/notes.org"))))))

    (defun mkm-read()
      "Read a notes entry with webpage and notes TODO side-by-side"
      (interactive)
      (let*  ((url-prop (org-entry-properties (point) "URL")))
        (progn
          (if url-prop
              (let* ((url (cdr (assoc "URL" url-prop))))
                (if (string-match-p (regexp-quote "youtube.com") url)
                    (browse-url url)
                  (progn
                    (org-narrow-to-subtree)
                    (delete-other-windows)
                    (split-window-right)
                    (eww url))))))))
  (setq org-export-with-author nil)
  (setq org-export-with-date nil)
  (setq org-export-with-toc nil)
  (setq org-export-with-creator nil)
   #+END_SRC
** org-gcal
   #+BEGIN_SRC emacs-lisp
  (use-package org-gcal
     :ensure t)
     (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
   #+END_SRC
** Org-journal
#+BEGIN_SRC emacs-lisp
(use-package org-journal
   :ensure t
   :config
   (setq org-journal-dir "~/Dropbox/Notes/journal/"))
#+END_SRC

** org-pdfview
   #+BEGIN_SRC emacs-lisp
   (use-package org-pdfview
   :ensure t
   :config
   (add-to-list 'org-file-apps '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open link)))))
   #+END_SRC
** org-web-tools
   - Provides useful functions to work with web pages. Ex: extract title
#+BEGIN_SRC emacs-lisp
(use-package org-web-tools
   :ensure t)
#+END_SRC
** PDB
#+BEGIN_SRC emacs-lisp
  (use-package pdb-mode
    :ensure t)
#+END_SRC
** pdf tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :bind (:map pdf-view-mode-map
          ("o" . pdf-outline)
          ("M-g g" . pdf-view-goto-label)
          ("M" . pdf-view-midnight-minor-mode))
    :config
      (progn
        (setq pdf-tools-handle-upgrades nil) ; Use brew upgrade pdf-tools instead.
        (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo"))
        (pdf-tools-install))
#+END_SRC

** Recentf
#+begin_src emacs-lisp
(use-package recentf
  :bind ("C-x C-r" . helm-recentf)
  :config
  (recentf-mode t)
  (setq recentf-max-saved-items 200))
#+end_src

** Winner mode
Winner mode allows you to undo/redo changes to window changes in Emacs.
#+begin_src emacs-lisp
(use-package winner
  :config
  (winner-mode t))
#+end_src

** YAML mode
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
   :ensure t
   :mode "\\.yaml$")
#+END_SRC

** Undo tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :diminish undo-tree-mode
  :config (global-undo-tree-mode))
#+END_SRC

* Shell

#+BEGIN_SRC emacs-lisp
(defun myshell (arg)
  (interactive "c")
  (if (or (< arg 32) (> arg 126))
      (error "Please use printable character for shell name"))
  (let* ((buffer (get-buffer (format "*eshell*<%c>" arg))))
    (if buffer
	(switch-to-buffer buffer)
      (progn
	(eshell)
        (make-local-variable 'comint-input-sender)
	(rename-buffer (format "*eshell*<%c>" arg))))))
(define-key global-map '[(meta ?z)] 'myshell)

(add-hook 'comint-mode-hook 
          (lambda nil
            (define-key (current-local-map) "\ep" 
              'comint-previous-matching-input-from-input)
            (define-key (current-local-map) "\en" 
              'comint-next-matching-input-from-input)))
#+END_SRC

* Re-create scratch buffer
  #+BEGIN_SRC emacs-lisp
  (defun mkm-get-scratch-buffer nil
   "create/switch to a scratch buffer"
   (interactive)
   (switch-to-buffer (get-buffer-create "*scratch*"))
   (lisp-interaction-mode))
  #+END_SRC
